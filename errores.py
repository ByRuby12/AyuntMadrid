import nest_asyncio
import json
import os
import asyncio
import re
import time
from datetime import datetime, timedelta
import openai
from telegram import (Update, KeyboardButton, ReplyKeyboardMarkup)
from telegram.ext import (ApplicationBuilder, MessageHandler, CommandHandler, filters, ContextTypes)
#----------------------------------------------------------------------------

nest_asyncio.apply()

# Claves API desde variables de entorno
TELEGRAM_GROUP_ID = "-1002545875124"
openai_api_key = os.getenv("OPENAI_API_KEY")
telegram_bot_key = os.getenv("CURAIME_BOT_KEY")

# Configurar OpenAI
MODEL = "gpt-4o-mini"
openai.api_key = openai_api_key

# Mensaje de contexto para OpenAI
system_content_prompt = (
    "Eres un bot de Telegram especializado en avisos de emergencia. "
    "Proporcionas informaci√≥n clara y r√°pida sobre incidentes como incendios, accidentes y desastres naturales. "
    "Siempre respondes con un tono profesional y directo, sin causar p√°nico."
)

messages_to_send = [{"role": "system", "content": system_content_prompt}]

# Diccionario para almacenar avisos pendientes de ubicaci√≥n
avisos_pendientes = {}  # Clave: user_id, Valor: (descripci√≥n, ubicaci√≥n)
avisos_gestionados = []  # Lista de avisos ya aprobados o atendidos
avisos_enviados = {}  # Para evitar spam de avisos por usuario
usuarios_verificados = {} # almacenar datos de usuarios verificados
last_help_request = {} # almacenar ultima vez que usuario uso comando /ayuda

AVISOS = {
    "ALUMBRADO P√öBLICO": [
        "Calle apagada", 
        "Calle apagada v2", 
        "Calle apagada v3", 
        "Calle apagada v4", 
        "Farola apagada", 
        "Otras aver√≠as de alumbrado"
    ],
    "Aparcamiento regulado": [
        "Aparcamiento regulado"
    ],
    "√ÅRBOLES Y PARQUES": [
        "√Årbol en mal estado", 
        "Caminos no pavimentados", 
        "Incidencias de riego", 
        "Incidencias en alcorque o hueco", 
        "Plagas", 
        "Poda de √°rbol", 
        "Quitar maleza", 
        "Sustituci√≥n de √°rbol"
    ],
    "AREAS INFANTILES, √ÅREAS DE MAYORES Y CIRCUITOS": [
        "√Årea de mayores y circuitos", 
        "√Årea infantil"
    ],
    "CALZADAS Y ACERAS": [
        "Alcantarillado", 
        "Desperfecto en acera", 
        "Desperfecto en calzada", 
        "Hidrantes de bomberos", 
        "Otras incidencias en calzadas y aceras", 
        "Tapas de registro"
    ],
    "CUBOS Y CONTENEDORES": [
        "Cambio de tama√±o de cubo", 
        "Cambio de ubicaci√≥n de cubo o contenedor", 
        "Cubo o contenedor abandonado", 
        "Cubo o contenedor en mal estado", 
        "Horquillas delimitadoras", 
        "Nuevo cubo o contenedor", 
        "Vaciado de aceite", 
        "Vaciado de cubo o contenedor"
    ],
    "FUENTES": [
        "Incidencias en fuentes de beber", 
        "Incidencias en fuentes ornamentales"
    ],
    "LIMPIEZA Y PINTADAS": [
        "Limpieza en solares municipales", 
        "Limpieza en v√≠as p√∫blicas", 
        "Limpieza mobiliario urbano o √°reas infantiles", 
        "Pintadas y grafitis", 
        "Pintadas y grafitis v2", 
        "Pintadas y grafitis v3"
    ],
    "MOBILIARIO URBANO": [
        "Banco", 
        "Bolardo u horquilla", 
        "Otros", 
        "Vallas"
    ],
    "PAPELERAS": [
        "Falta de bolsas para excrementos caninos", 
        "Mal estado de papelera", 
        "Nueva instalaci√≥n de papelera", 
        "Vaciado de papelera"
    ],
    "PLAGAS": [
        "Ratas y cucarachas"
    ],
    "RETIRADAS DE ELEMENTOS": [
        "Animales muertos", 
        "Contenedor de ropa no autorizado", 
        "Muebles abandonados en v√≠a p√∫blica", 
        "Muebles particulares", 
        "Recogida de saco o contenedor de escombros"
    ],
    "RIO MANZANARES": [
        "R√≠o Manzanares"
    ],
    "SE√ëALES Y SEM√ÅFOROS": [
        "Incidencia en avisador ac√∫stico de sem√°foro", 
        "Incidencia en pulsador", 
        "Incidencia en se√±al", 
        "Sem√°foro apagado"
    ],
    "VEHICULOS ABANDONADOS. RETIRADA DE VEHICULO": [
        "Veh√≠culos abandonados. Retirada de veh√≠culo"
    ]
}

PETICIONES = {
    "ALUMBRADO P√öBLICO": [
        "Peticiones alumbrado"
    ],
    "AREAS INFANTILES, √ÅREAS DE MAYORES Y CIRCUITOS": [
        "Nueva Instalaci√≥n"
    ],
    "CALZADAS Y ACERAS": [
        "Mejora de accesibilidad"
    ],
    "FUENTES": [
        "Nueva Instalaci√≥n de fuente de beber"
    ],
    "MOBILIARIO URBANO": [
        "Nueva Instalaci√≥n"
    ],
    "SE√ëALES Y SEM√ÅFOROS": [
        "Nueva Se√±al"
    ]
}

#----------------------------------------------------------------------------

async def iniciar_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "avisos_pendientes" not in context.bot_data:
        context.bot_data["avisos_pendientes"] = []
    if "avisos_gestionados" not in context.bot_data:
        context.bot_data["avisos_gestionados"] = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra los comandos disponibles de manera organizada."""
    try:
        start_message = ( 
            "‚ö†Ô∏è *Bienvenido al Bot de Avisos de Emergencia.*\n\n"
            "üîπ Usa los siguientes comandos principales:\n\n"
            "‚úÖ /verificar - Registrar tus datos personales para reportar avisos.\n"
            "‚úÖ /ayuda - Reporta una emergencia.\n"
            "‚úÖ /asistente - Informa de lo que se deber√≠a de hacer en X caso.\n"
            "‚úÖ /contacto - Ver los n√∫meros de emergencia en Espa√±a.\n"
            "‚úÖ /datos - Ver los datos que has registrado.\n\n"
            "üî∏ Para ver todos los comandos disponibles, usa: /comandos"
        )

        await update.message.reply_text(start_message, parse_mode="Markdown")
    except Exception as e:
        print(f"Error en /start: {e}")
        await update.message.reply_text("‚ùå Ha ocurrido un error al mostrar el men√∫.")

async def como_usar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Explica detalladamente c√≥mo usar el bot paso a paso, incluyendo la verificaci√≥n obligatoria y el env√≠o de fotos/videos."""
    help_text = (
        "‚ö†Ô∏è *Bienvenido al Bot de Avisos de Emergencia* ‚ö†Ô∏è\n\n"
        "Este bot est√° dise√±ado para proporcionar informaci√≥n en tiempo real sobre emergencias "
        "y alertas importantes en tu zona. Puedes reportar incidentes, recibir avisos de seguridad "
        "y consultar n√∫meros de emergencia.\n\n"
        
        "üîπ *¬øC√≥mo funciona?*\n"
        "1Ô∏è‚É£ Usa `/verificar` para registrar tus datos antes de enviar un aviso.\n"
        "2Ô∏è‚É£ Usa `/ayuda [descripci√≥n]` para reportar una emergencia.\n"
        "3Ô∏è‚É£ Comparte tu ubicaci√≥n cuando se te solicite.\n"
        "4Ô∏è‚É£ Env√≠a una *foto o video* del incidente despu√©s de compartir tu ubicaci√≥n.\n"
        "5Ô∏è‚É£ Usa `/pendientes` para ver los avisos en espera y los que han sido gestionados.\n"
        "6Ô∏è‚É£ Consulta los n√∫meros de emergencia con `/contacto`.\n"
        "7Ô∏è‚É£ Usa `/datos` para ver los datos que has registrado.\n"
        "8Ô∏è‚É£ Usa `/modificar` para modificar los datos que has registrado.\n"
        "9Ô∏è‚É£ Usa `/asistente [incidente]` para obtener recomendaciones sobre qu√© hacer en una situaci√≥n de emergencia.\n"
        "üîü Usa `/help` si tienes dudas.\n\n"
    )
    
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def comandos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra los comandos disponibles para el usuario."""
    command_text = (
        "üìú *Comandos Disponibles:*\n\n"
        "‚úÖ /start - Muestra el men√∫ de opciones.\n"
        "‚úÖ /verificar - Registra tus datos personales.\n"
        "‚úÖ /ayuda - Reporta una emergencia.\n"
        "‚úÖ /pendientes - Lista de avisos pendientes y aprobados.\n"
        "‚úÖ /asistente - Informa de lo que se deber√≠a de hacer en X caso.\n"
        "‚úÖ /contacto - Muestra los n√∫meros de emergencia.\n"
        "‚úÖ /datos - Ver los datos que has registrado.\n"
        "‚úÖ /modificar - Modificar los datos que has registrado.\n"
        "‚úÖ /comandos - Muestra todos los comandos disponibles.\n"
        "‚úÖ /help - Explicaci√≥n sobre c√≥mo usar el bot.\n\n"

        "üìß *Soporte t√©cnico:* contacto@empresa.com\n"
        "üìû *Tel√©fono de atenci√≥n:* +34 600 123 456"
    )

    await update.message.reply_text(command_text, parse_mode="Markdown")

async def verificar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Solicita los datos personales antes de permitir enviar un aviso."""
    user_id = update.message.from_user.id

    # Verifica si el usuario ya envi√≥ sus datos
    if user_id in context.user_data and "datos_verificados" in context.user_data[user_id]:
        await update.message.reply_text("‚úÖ Ya has verificado tus datos. Puedes enviar avisos.")
        return

    await update.message.reply_text(
        "üìù *Verificaci√≥n de identidad requerida.*\n\n"
        "Por favor, env√≠a los siguientes datos en un solo mensaje:\n"
        "1Ô∏è‚É£ Nombre completo\n"
        "2Ô∏è‚É£ Correo electr√≥nico\n"
        "3Ô∏è‚É£ N√∫mero de tel√©fono\n\n"
        "Ejemplo:\n"
        "`Juan P√©rez G√≥mez, juan.perez@email.com, 698767665`",
        parse_mode="Markdown"
    )

    # Marca al usuario como pendiente de verificaci√≥n
    context.user_data[user_id] = {"verificacion_pendiente": True}

async def recibir_datos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Recibe y valida los datos personales enviados por el usuario."""
    user_id = update.message.from_user.id

    if user_id not in context.user_data or "verificacion_pendiente" not in context.user_data[user_id]:
        return  # Ignorar si el usuario no est√° en proceso de verificaci√≥n

    datos = update.message.text.strip()
    partes = datos.split(",")

    if len(partes) != 3:
        await update.message.reply_text("‚ùå Formato incorrecto. Env√≠a los datos como en el ejemplo.")
        return

    nombre, correo, telefono = map(str.strip, partes)

    # Validar datos b√°sicos
    if not re.match(r"^[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√ë√± ]+$", nombre):
        await update.message.reply_text("‚ùå Nombre inv√°lido. Debe contener solo letras y espacios.")
        return
    if not re.match(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", correo):
        await update.message.reply_text("‚ùå Correo electr√≥nico inv√°lido. Usa un formato v√°lido como `correo@dominio.com`.")
        return
    if not re.match(r"^\+?\d{9,15}$", telefono):
        await update.message.reply_text("‚ùå Tel√©fono inv√°lido. Usa un formato v√°lido como +34 600123456.")
        return

    # Guardar datos en el usuario
    context.user_data[user_id] = {
        "nombre": nombre,
        "correo": correo,
        "telefono": telefono,
        "datos_verificados": True
    }

    print("‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")
    print("‚úÖ Datos del usuario guardados:")
    print(f"üë§ Nombre: {nombre}")
    print(f"üìß Correo: {correo}")
    print(f"üìû Tel√©fono: {telefono}")
    print("‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")

    await update.message.reply_text("‚úÖ Datos verificados. Ahora puedes enviar reportes con /ayuda.")

async def modificar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Permite al usuario modificar sus datos si se ha equivocado."""
    user_id = update.message.from_user.id

    # Verifica si el usuario ya ha verificado sus datos
    if user_id not in context.user_data or "datos_verificados" not in context.user_data[user_id]:
        await update.message.reply_text("‚ùå No tienes datos verificados. Usa /verificar primero.")
        return

    # Elimina los datos anteriores para permitir la reingresi√≥n
    del context.user_data[user_id]["nombre"]
    del context.user_data[user_id]["correo"]
    del context.user_data[user_id]["telefono"]
    del context.user_data[user_id]["datos_verificados"]

    # Inicia el proceso de verificaci√≥n de nuevo
    await update.message.reply_text(
        "üìù Modificaci√≥n de datos\n\n"
        "Por favor, ingresa de nuevo los siguientes datos en un solo mensaje:\n"
        "1Ô∏è‚É£ Nombre completo\n"
        "2Ô∏è‚É£ Correo electr√≥nico\n"
        "3Ô∏è‚É£ N√∫mero de tel√©fono\n\n"
        "Ejemplo:\n"
        "`Juan P√©rez G√≥mez, juan.perez@email.com, 698767665`",
        parse_mode="Markdown"
    )

    # Marca al usuario como pendiente de nueva verificaci√≥n
    context.user_data[user_id] = {"verificacion_pendiente": True}

async def datos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra los datos verificados del usuario."""
    user_id = update.message.from_user.id
    
    # Verifica si el usuario tiene datos verificados
    if user_id not in context.user_data or "datos_verificados" not in context.user_data[user_id]:
        await update.message.reply_text("‚ùå A√∫n no has verificado tus datos. Usa /verificar para ingresarlos.")
        return
    
    # Recupera los datos del usuario
    nombre = context.user_data[user_id].get("nombre", "No disponible")
    correo = context.user_data[user_id].get("correo", "No disponible")
    telefono = context.user_data[user_id].get("telefono", "No disponible")
    
    # Env√≠a los datos al usuario
    await update.message.reply_text(
        f"üìä Tus datos verificados son:\n\n"
        f"1Ô∏è‚É£ Nombre completo: {nombre}\n"
        f"2Ô∏è‚É£ Correo electr√≥nico: {correo}\n"
        f"3Ô∏è‚É£ N√∫mero de tel√©fono: {telefono}"
    )

async def aviso(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Procesa cualquier aviso y aplica un cooldown de 2 minutos."""
    try:
        user_id = update.message.from_user.id
        ahora = time.time()

        # Asegurar que el usuario tiene una entrada en context.user_data
        if user_id not in context.user_data:
            context.user_data[user_id] = {}

        # Verificar si el usuario ya est√° verificado
        if "datos_verificados" not in context.user_data[user_id]:
            await update.message.reply_text(
                "‚ö†Ô∏è *Debes verificar tus datos antes de enviar un aviso.*\nUsa /verificar.",
                parse_mode="Markdown"
            )
            return

        # Comprobar si el usuario est√° en cooldown
        if "ultimo_aviso" in context.user_data[user_id] and (ahora - context.user_data[user_id]["ultimo_aviso"]) < 120:
            tiempo_restante = int(120 - (ahora - context.user_data[user_id]["ultimo_aviso"]))
            await update.message.reply_text(
                f"‚è≥ *Debes esperar {tiempo_restante} segundos antes de enviar otro aviso.*",
                parse_mode="Markdown"
            )
            return

        # Extraer el texto del aviso correctamente
        user_aviso = update.message.text.replace("/aviso", "").strip()

        if not user_aviso:
            await update.message.reply_text(
                "‚ö†Ô∏è *Formato incorrecto.*\nUsa:\n`/aviso [descripci√≥n del incidente]`",
                parse_mode="Markdown"
            )
            return

        # Guardar el aviso en avisos_pendientes en context.bot_data
        if "avisos_pendientes" not in context.bot_data:
            context.bot_data["avisos_pendientes"] = []

        context.bot_data["avisos_pendientes"].append({
            "user_id": user_id,
            "descripcion": user_aviso,
            "ubicacion": None
        })

        await update.message.reply_text(
            "üìå *Env√≠a tu ubicaci√≥n para completar el aviso.*",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìç Enviar Ubicaci√≥n", request_location=True)]],
                one_time_keyboard=True,
                resize_keyboard=True
            ),
            parse_mode="Markdown"
        )

    except Exception as e:
        print(f"‚ùå Error en /aviso: {e}")
        await update.message.reply_text("‚ùå Ha ocurrido un error al procesar tu aviso.")

async def recibir_ubicacion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Recibe la ubicaci√≥n del usuario y la asocia al aviso previo, luego pide una foto."""
    try:
        user_id = update.message.from_user.id
        location = update.message.location

        if not location:
            await update.message.reply_text("‚ùå No se ha recibido la ubicaci√≥n. Aseg√∫rate de enviarla correctamente.")
            return

        latitude, longitude = location.latitude, location.longitude

        if "avisos_pendientes" not in context.bot_data:
            context.bot_data["avisos_pendientes"] = []

        # Buscar el aviso pendiente del usuario
        aviso_encontrado = None
        for aviso in context.bot_data["avisos_pendientes"]:
            if aviso["user_id"] == user_id and aviso["ubicacion"] is None:
                aviso["ubicacion"] = (latitude, longitude)
                aviso["foto"] = None  # Agregar campo para la foto
                aviso_encontrado = aviso
                break

        if not aviso_encontrado:
            await update.message.reply_text(
                "‚ö†Ô∏è No tienes un aviso pendiente. Usa /aviso antes de enviar tu ubicaci√≥n.",
                parse_mode="Markdown"
            )
            return
        
        print(f"‚úÖ Ubicaci√≥n guardada para el aviso: {aviso_encontrado}")  # Depuraci√≥n
        print("‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")

        # Pedir una foto opcional
        await update.message.reply_text(
            "üì∑üìπ *Si es posible, env√≠a una foto o un video del incidente.*\n"
            "Es para poder verificar que el Aviso sea Correcto",
            parse_mode="Markdown"
        )

    except Exception as e:
        print(f"‚ùå Error en recibir_ubicacion: {e}")
        await update.message.reply_text("‚ùå Ha ocurrido un error al procesar la ubicaci√≥n.")

async def recibir_contenido(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Recibe una foto o un video del usuario y lo asocia al aviso pendiente, luego lo env√≠a al grupo."""
    try:
        user_id = update.message.from_user.id

        # Verificar si el mensaje contiene una foto o un video
        file_id = None
        file_type = None

        if update.message.photo:
            file_id = update.message.photo[-1].file_id  # √öltima imagen = mejor calidad
            file_type = "foto"
        elif update.message.video:
            file_id = update.message.video.file_id
            file_type = "video"
        else:
            await update.message.reply_text("‚ö†Ô∏è No se ha recibido una foto o video v√°lido.")
            return

        print(f"üì∑üìπ Archivo recibido de {user_id}, tipo: {file_type}, file_id: {file_id}")  # Depuraci√≥n

        if "avisos_pendientes" not in context.bot_data:
            context.bot_data["avisos_pendientes"] = []

        # Buscar el aviso pendiente del usuario
        aviso_encontrado = None
        for aviso in context.bot_data["avisos_pendientes"]:
            if aviso["user_id"] == user_id and aviso.get("archivo") is None:
                aviso["archivo"] = file_id
                aviso["tipo_archivo"] = file_type
                aviso_encontrado = aviso
                break

        if not aviso_encontrado:
            await update.message.reply_text("‚ö†Ô∏è No tienes un aviso pendiente que requiera una foto o video.")
            return

        print(f"‚úÖ {file_type.capitalize()} guardado en el aviso: {aviso_encontrado}")  
        print("‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")


        # Obtener los datos del usuario
        datos_usuario = context.user_data.get(user_id, {})
        nombre = datos_usuario.get("nombre", "Desconocido")
        telefono = datos_usuario.get("telefono", "No registrado")

        # Obtener los datos del aviso
        user_aviso = aviso_encontrado["descripcion"]
        latitude, longitude = aviso_encontrado["ubicacion"]

        mensaje_grupo = (
            f"üö® *NUEVO INCIDENTE REPORTADO*\n\n"
            f"üìå *Descripci√≥n:* {user_aviso}\n"
            f"üìÖ *Fecha y Hora:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üìç *Ubicaci√≥n:* [{latitude}, {longitude}](https://www.google.com/maps?q={latitude},{longitude})\n"
            f"üë§ *Reportado por:* {nombre}\n"
            f"üîî ¬°Atenci√≥n a este incidente!"
        )

        # Enviar el archivo al grupo de Telegram
        if file_type == "foto":
            await context.bot.send_photo(
                chat_id=TELEGRAM_GROUP_ID,
                photo=file_id,
                caption=mensaje_grupo,
                parse_mode="Markdown"
            )
        elif file_type == "video":
            await context.bot.send_video(
                chat_id=TELEGRAM_GROUP_ID,
                video=file_id,
                caption=mensaje_grupo,
                parse_mode="Markdown"
            )

        await update.message.reply_text(f"‚úÖ *Aviso registrado y enviado con {file_type}.*", parse_mode="Markdown")
        context.user_data[user_id]["ultimo_aviso"] = time.time()

    except Exception as e:
        print(f"‚ùå Error en recibir_contenido: {e}")
        await update.message.reply_text("‚ùå Ha ocurrido un error al procesar el archivo.")

async def pendientes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra los avisos pendientes y los ya gestionados."""
    mensaje = "üìã *Estado de los avisos de emergencia:*\n\n"

    # Asegurar que las listas existen en `bot_data`
    if "avisos_pendientes" not in context.bot_data:
        context.bot_data["avisos_pendientes"] = []
    if "avisos_gestionados" not in context.bot_data:
        context.bot_data["avisos_gestionados"] = []

    # Mostrar avisos pendientes
    if context.bot_data["avisos_pendientes"]:
        mensaje += "‚è≥ *Avisos pendientes:*\n"
        for aviso in context.bot_data["avisos_pendientes"]:
            ubicacion = f"üìç {aviso['ubicacion'][0]}, {aviso['ubicacion'][1]}" if aviso["ubicacion"] else "üìç Ubicaci√≥n pendiente"
            mensaje += f"üîπ {aviso['descripcion']}\n{ubicacion}\n\n"
    else:
        mensaje += "‚úÖ No hay avisos pendientes.\n\n"

    # Mostrar avisos gestionados
    if context.bot_data["avisos_gestionados"]:
        mensaje += "‚úÖ *Avisos gestionados:*\n"
        for aviso in context.bot_data["avisos_gestionados"]:
            mensaje += f"‚úîÔ∏è {aviso['descripcion']}\n\n"
    else:
        mensaje += "‚ÑπÔ∏è No hay avisos gestionados a√∫n.\n"

    await update.message.reply_text(mensaje, parse_mode="Markdown")

async def contacto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra los n√∫meros de emergencia en Espa√±a."""
    emergency_numbers = (
        "üìû *N√∫meros de Emergencia en Espa√±a:*\n\n"
        "üöë Emergencias generales: *112*\n"
        "üöî Polic√≠a Nacional: *091*\n"
        "üëÆ‚Äç‚ôÇÔ∏è Guardia Civil: *062*\n"
        "üöí Bomberos: *080* / *085*\n"
        "üè• Emergencias sanitarias: *061*\n"
        "‚ö†Ô∏è Protecci√≥n Civil: *900 400 012*\n"
        "üö® Cruz Roja: *900 100 333*\n"
        "üÜò Violencia de g√©nero: *016*\n\n"
        "üîπ *Guarda estos n√∫meros en tu m√≥vil para cualquier emergencia.*"
    )
    await update.message.reply_text(emergency_numbers, parse_mode="Markdown")

def analizar_reporte(mensaje):
    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Eres un asistente que clasifica reportes de incidencias en una ciudad."},
            {"role": "user", "content": f"Clasifica este reporte: {mensaje}"}
        ],
        functions=[
            {
                "name": "clasificar_reporte",
                "description": "Clasifica un reporte de aviso o petici√≥n en su categor√≠a y subcategor√≠a correspondiente",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "tipo_reporte": {"type": "string", "enum": ["aviso", "petici√≥n"]},
                        "categoria": {"type": "string"},
                        "subcategoria": {"type": "string"}
                    },
                    "required": ["tipo_reporte", "categoria", "subcategoria"]
                }
            }
        ],
        function_call="auto"
    )

    # üìå Extraer los datos de la respuesta
    result = response.get("choices", [{}])[0].get("message", {}).get("function_call", {}).get("arguments", "{}")

    if result:
        # Reemplazamos 'true' y 'false' por True y False para hacer un JSON v√°lido en Python
        result = result.replace("true", "True").replace("false", "False")
        
        try:
            data = json.loads(result)  # Convertir JSON a diccionario
            return data  # Devuelve el diccionario con el reporte clasificado
        except json.JSONDecodeError as e:
            print(f"Error al procesar JSON: {e}")
            return None
    
    return None

def analizar_direccion(mensaje):
    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Eres un asistente que detecta direcciones completas en los mensajes."},
            {"role": "user", "content": f"Extrae la direcci√≥n completa de este mensaje: {mensaje}"}
        ],
        functions=[
            {
                "name": "extraer_direccion",
                "description": "Detecta una direcci√≥n completa en el mensaje.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "direccion": {"type": "string"}
                    },
                    "required": ["direccion"]
                }
            }
        ],
        function_call="auto"
    )

    # üìå Extraer los datos de la respuesta
    result = response.get("choices", [{}])[0].get("message", {}).get("function_call", {}).get("arguments", "{}")
    
    if result:
        try:
            data = json.loads(result)  # Convertir JSON a diccionario
            direccion = data.get("direccion")  # Obtener la direcci√≥n extra√≠da
            if direccion and validar_direccion(direccion):  # Validar la direcci√≥n
                return direccion
            else:
                return "‚ö†Ô∏è La direcci√≥n proporcionada parece incorrecta. Por favor, verifica y corrige la direcci√≥n."
        except json.JSONDecodeError as e:
            print(f"Error al procesar JSON: {e}")
            return None
    
    return None

def validar_direccion(direccion):
    # Expresi√≥n regular que acepta una variedad de direcciones
    patron = re.compile(r"([A-Za-z0-9√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s,]+(?:[\d\s,]+)?)\s*(\d{5})?$")
    if patron.match(direccion):
        return True
    else:
        return False

async def ayuda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.replace("/ayuda", "").strip()
    user_id = update.message.from_user.id

    # Verificar si el usuario est√° verificado
    if user_id not in context.user_data or "datos_verificados" not in context.user_data[user_id]:
        await update.message.reply_text("‚ö†Ô∏è Necesitas verificar tus datos antes de enviar un reporte.\n"
        "Usa el comando /verificar para iniciar el proceso.")
        return

    # Verificar si el usuario est√° enviando el comando sin mensaje
    if not user_message:
        await update.message.reply_text(
            "‚ö†Ô∏è Por favor, proporciona un mensaje despu√©s de /ayuda\n\n"
            "Aqu√≠ te dejamos algunos ejemplos para que sepas c√≥mo enviarlo correctamente:\n\n"
            "1Ô∏è‚É£ **Emergencia** (ejemplo de accidente):\n"
            "`/ayuda accidente de coche en la M45 salida 23`\n"
            "Este tipo de mensaje es para situaciones urgentes donde necesitas asistencia inmediata.\n\n"
            "2Ô∏è‚É£ **Reporte general** (ejemplo de aviso de incidente):\n"
            "`/ayuda hay un bache en la calle Mayor 12, Madrid`\n"
            "Utiliza este tipo de mensaje para reportar problemas que no son emergencias, como baches, apagones, etc.\n\n"
            "3Ô∏è‚É£ **Petici√≥n de ayuda** (ejemplo de solicitud de recursos):\n"
            "`/ayuda necesito asistencia m√©dica en Avenida de la Paz 10, Madrid, 28010`\n"
            "Usa este mensaje cuando necesites ayuda con recursos espec√≠ficos, como asistencia m√©dica o bomberos.\n\n"
            "üîç **Consejos importantes**:\n"
            "- Aseg√∫rate de incluir una descripci√≥n clara de lo sucedido.\n"
            "- Si es relevante, proporciona una direcci√≥n completa o una ubicaci√≥n (por ejemplo, Calle del Sol 3, Madrid, 28001).\n"
            "- Si es una emergencia, usa palabras como 'accidente', 'fuego', 'herido', etc.\n\n"
            "üìç **Ejemplo completo de reporte con direcci√≥n**:\n"
            "`/ayuda accidente de tr√°fico en la Calle Mayor 3, Madrid, 28001, con varios coches implicados`",
            parse_mode="Markdown"
        )
        return

    # Verificar si el usuario ha usado el comando recientemente
    current_time = datetime.now()
    if user_id in last_help_request:
        last_request_time = last_help_request[user_id]
        time_difference = current_time - last_request_time

        # Si ha pasado menos de 1 minuto desde la √∫ltima solicitud, no permitir enviar el comando nuevamente
        if time_difference < timedelta(minutes=1):
            await update.message.reply_text("‚ö†Ô∏è Por favor, espera un minuto antes de enviar otro reporte.")
            return

    # Actualizar el tiempo de la √∫ltima solicitud del usuario
    last_help_request[user_id] = current_time

    print(f"\nüîπ Nuevo mensaje recibido de {user_id}: {user_message}")

    # üìå Intentamos clasificarlo como reporte general
    reporte = analizar_reporte(user_message)  # Tambi√©n sin 'await'
    if reporte:
        tipo_reporte = reporte["tipo_reporte"]
        categoria = reporte["categoria"]
        subcategoria = reporte["subcategoria"]

        print(f"‚úÖ Reporte clasificado: Tipo: {tipo_reporte}, Categor√≠a: {categoria}, Subcategor√≠a: {subcategoria}")

        respuesta = (
            f"üìã Reporte clasificado:\n"
            f"üë§ Usuario: `{user_id}`\n"
            f"üìå Tipo: {tipo_reporte.capitalize()}\n"
            f"üìÇ Categor√≠a: {categoria}\n"
            f"üîñ Subcategor√≠a: {subcategoria}"
        )

        # üìå Intentamos extraer y validar la direcci√≥n
        direccion = analizar_direccion(user_message)
        if direccion:
            respuesta += f"\nüó∫Ô∏è Direcci√≥n: {direccion}"

        await update.message.reply_text(respuesta, parse_mode="Markdown")

        # Enviar el reporte al grupo de Telegram
        await context.bot.send_message(
            chat_id=TELEGRAM_GROUP_ID,
            text=respuesta
        )

        return

    # üìå Si no es ni emergencia ni reporte v√°lido
    print("‚ö†Ô∏è No se pudo clasificar el mensaje.")
    await update.message.reply_text("‚ö†Ô∏è No he podido entender tu solicitud.")

#----------------------------------------------------------------------------

if __name__ == '__main__':
    application = ApplicationBuilder().token(telegram_bot_key).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("verificar", verificar))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, recibir_datos))
    application.add_handler(CommandHandler("aviso", aviso))
    application.add_handler(MessageHandler(filters.LOCATION, recibir_ubicacion))
    application.add_handler(CommandHandler("contacto", contacto))
    application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO, recibir_contenido))
    application.add_handler(CommandHandler("help", como_usar))
    application.add_handler(CommandHandler("comandos", comandos))
    application.add_handler(CommandHandler("pendientes", pendientes))
    application.add_handler(CommandHandler("modificar", modificar))
    application.add_handler(CommandHandler("datos", datos))
    application.add_handler(CommandHandler("ayuda", ayuda))

    print("‚úÖ El bot est√° en ejecuci√≥n. Env√≠a un mensaje en Telegram para probarlo.")
    application.run_polling()