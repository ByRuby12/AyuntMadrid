# -----------------------IMPORT LIBRERIAS---------------------------

from diccionarios import AVISOS_PRUEBA, PETICIONES_PRUEBA
from claves import OPENAI_API_KEY, CURAIME_BOT_KEY

import nest_asyncio
import requests
import asyncio
import json
import os
import time
from datetime import datetime
import re
import openai
from telegram import (Update, ReplyKeyboardMarkup, KeyboardButton)
from telegram.ext import (ApplicationBuilder, MessageHandler, CommandHandler, filters, ContextTypes, ConversationHandler)

#----------------------------------------------------------------------------

# Permite aplicar una soluci√≥n para manejar m√∫ltiples bucles de eventos asyncio 
# dentro de un entorno donde ya hay un bucle de eventos en ejecuci√≥n.
nest_asyncio.apply()

# Claves API desde variables de entorno
TELEGRAM_GROUP_ID = "-1002545875124"
os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
os.environ["CURAIME_BOT_KEY"] = CURAIME_BOT_KEY

# Configurar Modelo OpenAI
MODEL = "gpt-4o-mini"
openai.api_key = OPENAI_API_KEY

# Etapas de la conversaci√≥n
UBICACION = 1

# Mensaje de contexto para OpenAI
system_content_prompt = (
    "Eres un asistente del Ayuntamiento de Madrid encargado de clasificar reportes ciudadanos. "
    "Los reportes pueden ser de tipo 'aviso' (problemas o incidencias) o 'petici√≥n' (solicitudes de mejora). "
    "Debes analizar un mensaje del usuario e identificar su tipo ('aviso' o 'petici√≥n'), una categor√≠a y una subcategor√≠a, "
    "siguiendo estrictamente los valores que aparecen en los diccionarios oficiales del Ayuntamiento.\n\n"

    "Aqu√≠ tienes el listado completo de categor√≠as y subcategor√≠as v√°lidas:\n\n"

    f"Categor√≠as y subcategor√≠as para AVISOS:\n"
    f"{json.dumps(AVISOS_PRUEBA, indent=2, ensure_ascii=False)}\n\n"

    f"Categor√≠as y subcategor√≠as para PETICIONES:\n"
    f"{json.dumps(PETICIONES_PRUEBA, indent=2, ensure_ascii=False)}\n\n"

    "üîç IMPORTANTE:\n"
    "- Aunque el mensaje del usuario no coincida exactamente con las palabras del diccionario, intenta identificar sin√≥nimos o frases similares.\n"
    "- Si el mensaje describe una situaci√≥n que encaja con alguna subcategor√≠a, devu√©lvela aunque est√© redactada de forma diferente.\n"
    "- Si no puedes identificar claramente ninguna categor√≠a o subcategor√≠a v√°lida, no devuelvas nada.\n\n"

    "Devuelve √∫nicamente subcategor√≠as exactas del diccionario. No inventes nuevas.\n"
)

messages_to_send = [{"role": "system", "content": system_content_prompt}]

#-----------------------------FUNCIONES DEL BOT-----------------------------------------------

# analizar_reporte(mensaje): Env√≠a el mensaje a la API de OpenAI para clasificarlo como 
# aviso o petici√≥n y asignar categor√≠a/subcategor√≠a v√°lida.
def analizar_reporte(mensaje):
    # Llamada a la API de OpenAI para analizar el mensaje
    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[ 
            {"role": "system", "content": system_content_prompt},
            {"role": "user", "content": f"Clasifica este reporte: {mensaje}"}
        ],
        functions=[ 
            {
                "name": "clasificar_reporte",
                "description": "Clasifica un reporte de aviso o petici√≥n en su categor√≠a y subcategor√≠a correspondiente",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "tipo_reporte": {"type": "string", "enum": ["aviso", "petici√≥n"]},
                        "categoria": {"type": "string"},
                        "subcategoria": {"type": "string"},
                        "id_subcategoria": {"type": "array", "items": {"type": "string"}}
                    },
                    "required": ["tipo_reporte", "categoria", "subcategoria", "id_subcategoria"]
                }
            }
        ],
        function_call="auto"
    )

    # üìå Extraer los datos de la respuesta
    result = response.get("choices", [{}])[0].get("message", {}).get("function_call", {}).get("arguments", "{}")

    print(f"‚ïî‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")
    print(f"‚ï†‚Äï‚Äï‚Äï‚ÄïRespuesta de la IA: {result}")
    
    if result:
        result = result.replace("true", "True").replace("false", "False")
        try:
            # Convertir la respuesta a formato JSON
            data = json.loads(result)
            print(f"‚ï†‚Äï‚Äï‚Äï‚ÄïDatos procesados: {data}")

            tipo_reporte = data.get("tipo_reporte")
            categoria = data.get("categoria")
            subcategoria = data.get("subcategoria")

            # Verificar si la categor√≠a y subcategor√≠a est√°n en los diccionarios
            if tipo_reporte == "aviso":
                print(f"‚ï†‚Äï‚Äï‚Äï‚ÄïTipo de reporte: {tipo_reporte}, Categor√≠a: {categoria}, Subcategor√≠a: {subcategoria}")
                if categoria in AVISOS_PRUEBA:
                    for sub in AVISOS_PRUEBA[categoria]:
                        if sub["nombre"].lower() == subcategoria.lower():
                            print(f"‚ïö‚Äï‚Äï‚Äï‚ÄïReporte clasificado correctamente como aviso.")
                            return {
                                "tipo_reporte": "aviso",
                                "categoria": categoria,
                                "subcategoria": subcategoria,
                                "id_subcategoria": sub["id"]
                            }
                    # Intentar asignar la categor√≠a y subcategor√≠a correcta
                    print(f"‚ï†‚Äï‚Äï‚Äï‚ÄïCategor√≠a o subcategor√≠a no v√°lida: {categoria} / {subcategoria}")
                    for cat, subcats in AVISOS_PRUEBA.items():
                        for sub in subcats:
                            if sub["nombre"].lower() in mensaje.lower():
                                print(f"Asignando categor√≠a: {cat} y subcategor√≠a: {sub['nombre']}")
                                return {
                                    "tipo_reporte": "aviso",
                                    "categoria": cat,
                                    "subcategoria": sub['nombre'],
                                    "id_subcategoria": sub["id"]
                                }

            elif tipo_reporte == "petici√≥n":
                print(f"‚ï†‚Äï‚Äï‚Äï‚ÄïTipo de reporte: {tipo_reporte}, Categor√≠a: {categoria}, Subcategor√≠a: {subcategoria}")
                if categoria in PETICIONES_PRUEBA:
                    for sub in PETICIONES_PRUEBA[categoria]:
                        if sub["nombre"].lower() == subcategoria.lower():
                            print(f"‚ïö‚Äï‚Äï‚Äï‚ÄïReporte clasificado correctamente como petici√≥n.")
                            return {
                                "tipo_reporte": "petici√≥n",
                                "categoria": categoria,
                                "subcategoria": subcategoria,
                                "id_subcategoria": sub["id"]
                            }
                    # Intentar asignar la categor√≠a y subcategor√≠a correcta
                    print(f"‚ï†‚Äï‚Äï‚Äï‚ÄïCategor√≠a o subcategor√≠a no v√°lida para petici√≥n: {categoria} / {subcategoria}")
                    for cat, subcats in PETICIONES_PRUEBA.items():
                        for sub in subcats:
                            if sub["nombre"].lower() in mensaje.lower():
                                print(f"‚ï†‚Äï‚Äï‚Äï‚ÄïAsignando categor√≠a: {cat} y subcategor√≠a: {sub['nombre']}")
                                return {
                                    "tipo_reporte": "petici√≥n",
                                    "categoria": cat,
                                    "subcategoria": sub['nombre'],
                                    "id_subcategoria": sub["id"]
                                }

            print(f"‚ö†Ô∏è Categor√≠a o subcategor√≠a inv√°lida. Rechazando el resultado‚ö†Ô∏è")
            return None

        except json.JSONDecodeError as e:
            print(f"Error al procesar JSON: {e}")
            return None

    print(f"No se recibi√≥ una respuesta v√°lida del modelo.")
    return None

# ayuda(update, context): Verifica si el usuario est√° verificado, muestra ejemplos de 
# uso de /ayuda y solicita la ubicaci√≥n para el reporte.
async def ayuda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.replace("/ayuda", "").strip()
    user_id = update.message.from_user.id

    # Verificar si el usuario est√° enviando el comando sin mensaje
    if not user_message:
        await update.message.reply_text(
            "‚ö†Ô∏è Por favor, proporciona un mensaje despu√©s de /ayuda. Ejemplos de c√≥mo hacerlo:\n\n"
            "1Ô∏è‚É£ **Aviso** (problemas en la v√≠a p√∫blica):\n"
            "`/ayuda Farola apagada en la Calle Mayor 12, Madrid`\n"
            "Descripci√≥n detallada del problema y direcci√≥n completa.\n\n"
            "2Ô∏è‚É£ **Petici√≥n** (solicitudes de mejora):\n"
            "`/ayuda Solicito nueva instalaci√≥n de √°rea infantil en la Calle del Sol 3, Madrid`\n"
            "Especifica claramente la solicitud y la direcci√≥n exacta.\n\n"
            "üîç **Formato de direcci√≥n**: Incluye tipo de v√≠a, nombre de la calle, n√∫mero (si aplica), ciudad y c√≥digo postal.\n"
            "Ejemplos v√°lidos:\n"
            "‚Ä¢ Calle Alcal√° 23, Madrid, 28041\n"
            "‚Ä¢ Plaza Mayor 1, Madrid\n\n",
            parse_mode="Markdown"
        )
        return

    # Verificar si el usuario ha enviado un mensaje recientemente (esperar 2 minutos entre mensajes)
    last_message_time = context.user_data.get(user_id, {}).get("last_message_time", 0)
    current_time = time.time()

    # Si no ha pasado 2 minutos desde el √∫ltimo mensaje
    if current_time - last_message_time < 120:
        remaining_time = 120 - (current_time - last_message_time)
        await update.message.reply_text(f"‚ö†Ô∏è Por favor, espera {int(remaining_time)} segundos antes de enviar otro reporte.")
        return

    # Actualizar el tiempo del √∫ltimo mensaje
    if user_id not in context.user_data:
        context.user_data[user_id] = {}
    context.user_data[user_id]["last_message_time"] = current_time

    # Verificar si el mensaje es un reporte v√°lido
    reporte = analizar_reporte(user_message)
    if not reporte:
        await update.message.reply_text("‚ö†Ô∏è No he podido entender tu solicitud.")
        return

    tipo_reporte = reporte["tipo_reporte"]
    categoria = reporte["categoria"]
    subcategoria = reporte["subcategoria"]
    id_subcategoria = reporte["id_subcategoria"]  # Obtener las IDs de la subcategor√≠a

    # Guardar la informaci√≥n en context.user_data
    context.user_data["tipo_reporte"] = tipo_reporte
    context.user_data["categoria"] = categoria
    context.user_data["subcategoria"] = subcategoria
    context.user_data["id_subcategoria"] = id_subcategoria  # Guardar la ID de la subcategor√≠a
    context.user_data["user_message"] = user_message  # Guardar el mensaje tambi√©n

    # Solicitar la ubicaci√≥n
    await update.message.reply_text(
        "Por favor, comparte tu ubicaci√≥n en tiempo real para continuar con el reporte.",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìç Compartir ubicaci√≥n", request_location=True)]],
            one_time_keyboard=True
        )
    )
    return UBICACION

# recibir_ubicacion(update, context): Recibe la ubicaci√≥n del usuario, construye un 
# payload con los datos y lo env√≠a a la plataforma del Ayuntamiento de Madrid.
async def recibir_ubicacion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # Acceder a los datos almacenados en context.user_data
    tipo_reporte = context.user_data.get("tipo_reporte")
    categoria = context.user_data.get("categoria")
    subcategoria = context.user_data.get("subcategoria")
    id_subcategoria = context.user_data.get("id_subcategoria")  # Obtener la ID de la subcategor√≠a
    user_message = context.user_data.get("user_message")  # Obtener el mensaje del usuario

    # Obtener la ubicaci√≥n
    location = update.message.location
    if location:
        latitude = location.latitude
        longitude = location.longitude

        # Crear el payload para el POST
        payload = {
            "service_id": "591b36544e4ea839018b4653",  # Usar la ID de la subcategor√≠a
            "description": user_message,  # Descripci√≥n
            "position": {
                "lat": latitude,  # latitud
                "lng": longitude,  # longitud
                "location_additional_data": [
                    {
                        "question": "5e49c26b6d4af6ac018b4623",  # TIPO DE VIA
                        "value": "Avenida"
                    },
                    {
                        "question": "5e49c26b6d4af6ac018b4624",  # NOMBRE DE VIA 
                        "value": "Brasil"
                    },
                    {
                        "question": "5e49c26b6d4af6ac018b4625",  # NUMERO DE VIA
                        "value": "5"
                    },
                    {
                        "question": "5e49c26b6d4af6ac018b4627",  # CODIGO POSTAL
                        "value": 28020
                    },
                    {
                        "question": "5e49c26b6d4af6ac018b4628",  # NOMBRE DEL BARRIO
                        "value": "Cuatro Caminos"
                    },
                    {
                        "question": "5e49c26b6d4af6ac018b4629",  # NOMBRE DISTRITO
                        "value": "Tetuan"
                    },
                    {
                        "question": "5e49c26b6d4af6ac018b462a",  # CODIGO DEL DISTRITO
                        "value": 6
                    },
                    {
                        "question": "5e49c26b6d4af6ac018b462b",  # CODIGO DEL BARRIO
                        "value": 2
                    },
                    {
                        "question": "5e49c26b6d4af6ac018b462d",  # COORDENADA DE X DEL NDP
                        "value": 441155.2
                    },
                    {
                        "question": "5e49c26b6d4af6ac018b462e",  # Coordenada Y del NDP
                        "value": 4478434.5
                    },
                    {
                        "question": "5e49c26b6d4af6ac018b4633",  # Id ndp
                        "value": 20011240
                    },
                    {
                        "question": "5e49c26b6d4af6ac018b462f",  # Coordenada X del reporte
                        "value": 441182.22
                    },
                    {
                        "question": "5e49c26b6d4af6ac018b4630",  # Coordenada Y del reporte
                        "value": 4478435.6
                    },
                    {
                        "question": "5e49c26b6d4af6ac018b4632",  # Id de la via
                        "value": 114200
                    },
                    {
                        "question": "5e49c26b6d4af6ac018b4631",  # orientaci√≥n
                        "value": "Oeste"
                    }
                ]
            },
            "address_string": "Calle Mayor, 12",  # Direcci√≥n de ejemplo
            "device_type": "5922cfab4e4ea823178b4568",  # Optional
            "additionalData": [
                {
                    "question": "5e49c26b6d4af6ac018b45d2",  # ¬øCual es el problema?
                    "value": "Malos olores"
                }
            ]
        }

        headers = {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer 123'
        }

        url = "https://servpubpre.madrid.es/AVSICAPIINT/requests?jurisdiction_id=es.madrid&return_data=false"
        
        response = requests.post(url, headers=headers, json=payload)
        
    try:
        response_data = response.json()
        service_request_id = response_data.get("service_request_id", "No disponible")
    except json.JSONDecodeError:
        service_request_id = "No disponible"

    print(f"‚ïî‚Äï‚Äï‚Äï‚ÄïRespuesta del servidor: {response.text}")
    print(f"‚ïö‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")

    respuesta = (
        f"üìã Reporte Seguimiento: {service_request_id}\n"
        f"üë§ Usuario: `{user_id}`\n"
        f"üìå Tipo: {tipo_reporte.capitalize()}\n"
        f"üìÇ Categor√≠a: {categoria}\n"
        f"üîñ Subcategor√≠a: {subcategoria}\n"
        f"üîñ ID Subcategoria: `{id_subcategoria}`\n"
        f"üó∫Ô∏è Direcci√≥n: {latitude} {longitude}\n"
        f"üí¨ Descripci√≥n: {user_message}\n"
    )

    await update.message.reply_text(respuesta, parse_mode="Markdown")
    await context.bot.send_message(
        chat_id=TELEGRAM_GROUP_ID,
        text=respuesta,
        parse_mode="Markdown"
    )

    await update.message.reply_text("‚úÖ Tu reporte ha sido enviado correctamente a la Plataforma del Ayuntamiento de Madrid")

    return ConversationHandler.END

#-----------------------------MANEJADORES DEL BOT-----------------------------------------------

# Este c√≥digo configura y ejecuta el bot de Telegram, a√±adiendo manejadores para los comandos y mensajes, 
# y luego inicia el bot en modo "polling" para que empiece a recibir y responder a las interacciones de los usuarios.

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("ayuda", ayuda)],
    states={
        UBICACION: [MessageHandler(filters.LOCATION, recibir_ubicacion)]
    },
    fallbacks=[]
)

if __name__ == '__main__':
    application = ApplicationBuilder().token(CURAIME_BOT_KEY).build()

    application.add_handler(conv_handler)

    print("‚úÖ El bot est√° en ejecuci√≥n.")
    application.run_polling()