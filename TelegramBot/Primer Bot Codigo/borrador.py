# ESTO SON VARIABLES Y FUNCIONES QUE NO SE ESTAN USANDO ACTUALMENTE
# EST√ÅN AQUI POR SI SE NECESITAN COGER IDEAS EN UN FUTURO

# --------------------------------------------------------------

# Diccionario para almacenar avisos pendientes de ubicaci√≥n
avisos_pendientes = {}  # Clave: user_id, Valor: (descripci√≥n, ubicaci√≥n)
avisos_gestionados = []  # Lista de avisos ya aprobados o atendidos
avisos_enviados = {}  # Para evitar spam de avisos por usuario
usuarios_verificados = {} # almacenar datos de usuarios verificados
last_help_request = {} # almacenar ultima vez que usuario uso comando /ayuda

# -----------------------FUNCIONES BOT---------------------------

# Inicializa dos listas en context.bot_data para almacenar los avisos pendientes y gestionados.
async def iniciar_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "avisos_pendientes" not in context.bot_data:
        context.bot_data["avisos_pendientes"] = []
    if "avisos_gestionados" not in context.bot_data:
        context.bot_data["avisos_gestionados"] = []

# Procesa un aviso enviado por el usuario. Verifica si el usuario est√° verificado y si est√° dentro del 
# tiempo de cooldown (2 minutos). Si todo es correcto, solicita la ubicaci√≥n del usuario para completar el aviso.
async def aviso(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Procesa cualquier aviso y aplica un cooldown de 2 minutos."""
    try:
        user_id = update.message.from_user.id
        ahora = time.time()

        # Asegurar que el usuario tiene una entrada en context.user_data
        if user_id not in context.user_data:
            context.user_data[user_id] = {}

        # Verificar si el usuario ya est√° verificado
        if "datos_verificados" not in context.user_data[user_id]:
            await update.message.reply_text(
                "‚ö†Ô∏è *Debes verificar tus datos antes de enviar un aviso.*\nUsa /verificar.",
                parse_mode="Markdown"
            )
            return

        # Comprobar si el usuario est√° en cooldown
        if "ultimo_aviso" in context.user_data[user_id] and (ahora - context.user_data[user_id]["ultimo_aviso"]) < 120:
            tiempo_restante = int(120 - (ahora - context.user_data[user_id]["ultimo_aviso"]))
            await update.message.reply_text(
                f"‚è≥ *Debes esperar {tiempo_restante} segundos antes de enviar otro aviso.*",
                parse_mode="Markdown"
            )
            return

        # Extraer el texto del aviso correctamente
        user_aviso = update.message.text.replace("/aviso", "").strip()

        if not user_aviso:
            await update.message.reply_text(
                "‚ö†Ô∏è *Formato incorrecto.*\nUsa:\n`/aviso [descripci√≥n del incidente]`",
                parse_mode="Markdown"
            )
            return

        # Guardar el aviso en avisos_pendientes en context.bot_data
        if "avisos_pendientes" not in context.bot_data:
            context.bot_data["avisos_pendientes"] = []

        context.bot_data["avisos_pendientes"].append({
            "user_id": user_id,
            "descripcion": user_aviso,
            "ubicacion": None
        })

        await update.message.reply_text(
            "üìå *Env√≠a tu ubicaci√≥n para completar el aviso.*",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìç Enviar Ubicaci√≥n", request_location=True)]],
                one_time_keyboard=True,
                resize_keyboard=True
            ),
            parse_mode="Markdown"
        )

    except Exception as e:
        print(f"‚ùå Error en /aviso: {e}")
        await update.message.reply_text("‚ùå Ha ocurrido un error al procesar tu aviso.")

# Recibe la ubicaci√≥n enviada por el usuario y la asocia al aviso pendiente. Luego, solicita una foto o video como parte del aviso.
async def recibir_ubicacion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Recibe la ubicaci√≥n del usuario y la asocia al aviso previo, luego pide una foto."""
    try:
        user_id = update.message.from_user.id
        location = update.message.location

        if not location:
            await update.message.reply_text("‚ùå No se ha recibido la ubicaci√≥n. Aseg√∫rate de enviarla correctamente.")
            return

        latitude, longitude = location.latitude, location.longitude

        if "avisos_pendientes" not in context.bot_data:
            context.bot_data["avisos_pendientes"] = []

        # Buscar el aviso pendiente del usuario
        aviso_encontrado = None
        for aviso in context.bot_data["avisos_pendientes"]:
            if aviso["user_id"] == user_id and aviso["ubicacion"] is None:
                aviso["ubicacion"] = (latitude, longitude)
                aviso["foto"] = None  # Agregar campo para la foto
                aviso_encontrado = aviso
                break

        if not aviso_encontrado:
            await update.message.reply_text(
                "‚ö†Ô∏è No tienes un aviso pendiente. Usa /aviso antes de enviar tu ubicaci√≥n.",
                parse_mode="Markdown"
            )
            return
        
        print(f"‚úÖ Ubicaci√≥n guardada para el aviso: {aviso_encontrado}")  # Depuraci√≥n
        print("‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")

        # Pedir una foto opcional
        await update.message.reply_text(
            "üì∑üìπ *Si es posible, env√≠a una foto o un video del incidente.*\n"
            "Es para poder verificar que el Aviso sea Correcto",
            parse_mode="Markdown"
        )

    except Exception as e:
        print(f"‚ùå Error en recibir_ubicacion: {e}")
        await update.message.reply_text("‚ùå Ha ocurrido un error al procesar la ubicaci√≥n.")

# Recibe una foto o video del usuario y lo asocia al aviso pendiente. Luego, env√≠a los detalles del aviso 
# (incluyendo la ubicaci√≥n, descripci√≥n, etc.) al grupo de Telegram, junto con el archivo multimedia.
async def recibir_contenido(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Recibe una foto o un video del usuario y lo asocia al aviso pendiente, luego lo env√≠a al grupo."""
    try:
        user_id = update.message.from_user.id

        # Verificar si el mensaje contiene una foto o un video
        file_id = None
        file_type = None

        if update.message.photo:
            file_id = update.message.photo[-1].file_id  # √öltima imagen = mejor calidad
            file_type = "foto"
        elif update.message.video:
            file_id = update.message.video.file_id
            file_type = "video"
        else:
            await update.message.reply_text("‚ö†Ô∏è No se ha recibido una foto o video v√°lido.")
            return

        print(f"üì∑üìπ Archivo recibido de {user_id}, tipo: {file_type}, file_id: {file_id}")  # Depuraci√≥n

        if "avisos_pendientes" not in context.bot_data:
            context.bot_data["avisos_pendientes"] = []

        # Buscar el aviso pendiente del usuario
        aviso_encontrado = None
        for aviso in context.bot_data["avisos_pendientes"]:
            if aviso["user_id"] == user_id and aviso.get("archivo") is None:
                aviso["archivo"] = file_id
                aviso["tipo_archivo"] = file_type
                aviso_encontrado = aviso
                break

        if not aviso_encontrado:
            await update.message.reply_text("‚ö†Ô∏è No tienes un aviso pendiente que requiera una foto o video.")
            return

        print(f"‚úÖ {file_type.capitalize()} guardado en el aviso: {aviso_encontrado}")  
        print("‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")


        # Obtener los datos del usuario
        datos_usuario = context.user_data.get(user_id, {})
        nombre = datos_usuario.get("nombre", "Desconocido")
        telefono = datos_usuario.get("telefono", "No registrado")

        # Obtener los datos del aviso
        user_aviso = aviso_encontrado["descripcion"]
        latitude, longitude = aviso_encontrado["ubicacion"]

        mensaje_grupo = (
            f"üö® *NUEVO INCIDENTE REPORTADO*\n\n"
            f"üìå *Descripci√≥n:* {user_aviso}\n"
            f"üìÖ *Fecha y Hora:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üìç *Ubicaci√≥n:* [{latitude}, {longitude}](https://www.google.com/maps?q={latitude},{longitude})\n"
            f"üë§ *Reportado por:* {nombre}\n"
            f"üîî ¬°Atenci√≥n a este incidente!"
        )

        # Enviar el archivo al grupo de Telegram
        if file_type == "foto":
            await context.bot.send_photo(
                chat_id=TELEGRAM_GROUP_ID,
                photo=file_id,
                caption=mensaje_grupo,
                parse_mode="Markdown"
            )
        elif file_type == "video":
            await context.bot.send_video(
                chat_id=TELEGRAM_GROUP_ID,
                video=file_id,
                caption=mensaje_grupo,
                parse_mode="Markdown"
            )

        await update.message.reply_text(f"‚úÖ *Aviso registrado y enviado con {file_type}.*", parse_mode="Markdown")
        context.user_data[user_id]["ultimo_aviso"] = time.time()

    except Exception as e:
        print(f"‚ùå Error en recibir_contenido: {e}")
        await update.message.reply_text("‚ùå Ha ocurrido un error al procesar el archivo.")

# Muestra el estado actual de los avisos de emergencia en el bot, incluyendo tanto los avisos pendientes como los ya gestionados
async def pendientes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra los avisos pendientes y los ya gestionados."""
    mensaje = "üìã *Estado de los avisos de emergencia:*\n\n"

    # Asegurar que las listas existen en `bot_data`
    if "avisos_pendientes" not in context.bot_data:
        context.bot_data["avisos_pendientes"] = []
    if "avisos_gestionados" not in context.bot_data:
        context.bot_data["avisos_gestionados"] = []

    # Mostrar avisos pendientes
    if context.bot_data["avisos_pendientes"]:
        mensaje += "‚è≥ *Avisos pendientes:*\n"
        for aviso in context.bot_data["avisos_pendientes"]:
            ubicacion = f"üìç {aviso['ubicacion'][0]}, {aviso['ubicacion'][1]}" if aviso["ubicacion"] else "üìç Ubicaci√≥n pendiente"
            mensaje += f"üîπ {aviso['descripcion']}\n{ubicacion}\n\n"
    else:
        mensaje += "‚úÖ No hay avisos pendientes.\n\n"

    # Mostrar avisos gestionados
    if context.bot_data["avisos_gestionados"]:
        mensaje += "‚úÖ *Avisos gestionados:*\n"
        for aviso in context.bot_data["avisos_gestionados"]:
            mensaje += f"‚úîÔ∏è {aviso['descripcion']}\n\n"
    else:
        mensaje += "‚ÑπÔ∏è No hay avisos gestionados a√∫n.\n"

    await update.message.reply_text(mensaje, parse_mode="Markdown")

# -----------------------FUNCIONES BOT---------------------------

# analizar_reporte(mensaje): Utiliza la API de OpenAI para analizar el mensaje y 
# clasificarlo en un tipo de reporte (aviso o petici√≥n) con su categor√≠a y subcategor√≠a 
# correspondiente. Si el mensaje no se clasifica correctamente, intenta asignar 
# una categor√≠a y subcategor√≠a adecuadas.
def analizar_reporte(mensaje):
    # Llamada a la API de OpenAI para analizar el mensaje
    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": system_content_prompt},  # El prompt que te puse arriba
            {"role": "user", "content": f"Clasifica este reporte: {mensaje}"}
        ],
        functions=[
            {
                "name": "clasificar_reporte",
                "description": "Clasifica un reporte de aviso o petici√≥n en su categor√≠a y subcategor√≠a correspondiente",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "tipo_reporte": {"type": "string", "enum": ["aviso", "petici√≥n"]},
                        "categoria": {"type": "string"},
                        "subcategoria": {"type": "string"}
                    },
                    "required": ["tipo_reporte", "categoria", "subcategoria"]
                }
            }
        ],
        function_call="auto"
    )

    # üìå Extraer los datos de la respuesta
    result = response.get("choices", [{}])[0].get("message", {}).get("function_call", {}).get("arguments", "{}")
    
    print("‚ïî‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")
    print(f"‚ï†‚Äï‚Äï‚Äï‚ÄïRespuesta de la IA: {result}")
    
    if result:
        result = result.replace("true", "True").replace("false", "False")
        try:
            # Convertir la respuesta a formato JSON
            data = json.loads(result)
            print(f"‚ï†‚Äï‚Äï‚Äï‚ÄïDatos procesados: {data}")

            tipo_reporte = data.get("tipo_reporte")
            categoria = data.get("categoria")
            subcategoria = data.get("subcategoria")

            # Verificar si la categor√≠a y subcategor√≠a est√°n en los diccionarios
            if tipo_reporte == "aviso":
                print(f"‚ï†‚Äï‚Äï‚Äï‚ÄïTipo de reporte: {tipo_reporte}, Categor√≠a: {categoria}, Subcategor√≠a: {subcategoria}")
                if categoria in AVISOS and subcategoria in AVISOS[categoria]:
                    print("Reporte clasificado correctamente como aviso.")
                    return data
                else:
                    # Intentar asignar la categor√≠a y subcategor√≠a correcta
                    print(f"‚ï†‚Äï‚Äï‚Äï‚ÄïCategor√≠a o subcategor√≠a no v√°lida: {categoria} / {subcategoria}")
                    for cat, subcats in AVISOS.items():
                        if any(subcat.lower() in mensaje.lower() for subcat in subcats):
                            print(f"Asignando categor√≠a: {cat} y subcategor√≠a: {subcats[0]}")
                            return {"tipo_reporte": "aviso", "categoria": cat, "subcategoria": subcats[0]}

            elif tipo_reporte == "petici√≥n":
                print(f"‚ï†‚Äï‚Äï‚Äï‚ÄïTipo de reporte: {tipo_reporte}, Categor√≠a: {categoria}, Subcategor√≠a: {subcategoria}")
                if categoria in PETICIONES and subcategoria in PETICIONES[categoria]:
                    print("‚ï†‚Äï‚Äï‚Äï‚ÄïReporte clasificado correctamente como petici√≥n.")
                    return data
                else:
                    # Intentar asignar la categor√≠a y subcategor√≠a correcta para las peticiones
                    print(f"‚ï†‚Äï‚Äï‚Äï‚ÄïCategor√≠a o subcategor√≠a no v√°lida para petici√≥n: {categoria} / {subcategoria}")
                    for cat, subcats in PETICIONES.items():
                        if any(subcat.lower() in mensaje.lower() for subcat in subcats):
                            print(f"‚ï†‚Äï‚Äï‚Äï‚ÄïAsignando categor√≠a: {cat} y subcategor√≠a: {subcats[0]}")
                            print("‚ïö‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")
                            return {"tipo_reporte": "petici√≥n", "categoria": cat, "subcategoria": subcats[0]}

            print("‚ö†Ô∏è Categor√≠a o subcategor√≠a inv√°lida. Rechazando el resultado.")
            return None

        except json.JSONDecodeError as e:
            print(f"Error al procesar JSON: {e}")
            return None

    print("No se recibi√≥ una respuesta v√°lida del modelo.")
    return None

 # analizar_direccion(mensaje): Utiliza la API de OpenAI para extraer una direcci√≥n

# analizar_direccion(mensaje): Utiliza la API de OpenAI para extraer una direcci√≥n 
# completa (calle, avenida, etc.) del mensaje del usuario. Si la direcci√≥n no es 
# clara o v√°lida, devuelve None.
def analizar_direccion(mensaje):
    # Solicitar la direcci√≥n de manera m√°s directa y espec√≠fica
    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Eres un asistente que detecta direcciones completas en los mensajes. Extrae solo las direcciones completas (calle, avenida, carretera, con nombre y n√∫mero) y descarta cualquier otro tipo de informaci√≥n."},
            {"role": "user", "content": f"Extrae la direcci√≥n completa de este mensaje: {mensaje}"}
        ],
        functions=[
            {
                "name": "extraer_direccion",
                "description": "Detecta una direcci√≥n completa en el mensaje.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "direccion": {"type": "string"}
                    },
                    "required": ["direccion"]
                }
            }
        ],
        function_call="auto"
    )

    # Extraer resultado del JSON
    result = response.get("choices", [{}])[0].get("message", {}).get("function_call", {}).get("arguments", "{}")

    if result:
        try:
            data = json.loads(result)
            direccion = data.get("direccion")

            # Validar la direcci√≥n si es correcta
            if direccion and validar_direccion(direccion):
                return direccion
        except json.JSONDecodeError as e:
            print(f"Error al procesar direcci√≥n JSON: {e}")
    
    return None


# validar_direccion(direccion): Valida que una direcci√≥n tenga una estructura 
# coherente, aceptando calles, avenidas, carreteras, con n√∫mero y c√≥digo postal si es posible.
def validar_direccion(direccion):
    """
    Valida direcciones asegurando que contengan una estructura coherente.
    Permite calles, avenidas, carreteras, etc., con n√∫mero, ciudad y c√≥digo postal.
    """
    patron = re.compile(
        r"^(Calle|Avenida|Plaza|Paseo|Carretera|Autopista|Camino|Ronda|Traves√≠a|V√≠a|Urbanizaci√≥n)?\s?"+
        r"[A-Za-z0-9√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+(\s?\d+)?(,\s?[A-Za-z\s]+)?(,\s?\d{5})?$",
        re.IGNORECASE
    )
    return bool(patron.match(direccion.strip()))

# ayuda(update, context): Permite a los usuarios reportar una emergencia. 
# Verifica si el usuario ha verificado sus datos, solicita el formato correcto de direcci√≥n 
# si el mensaje est√° vac√≠o o tiene un formato incorrecto, y valida el tipo de reporte (aviso o petici√≥n). 
# Si todo es correcto, clasifica el reporte y lo env√≠a al grupo de Telegram.
async def ayuda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.replace("/ayuda", "").strip()
    user_id = update.message.from_user.id

    # Verificar si el usuario est√° verificado
    if user_id not in context.user_data or "datos_verificados" not in context.user_data[user_id]:
        await update.message.reply_text("‚ö†Ô∏è Necesitas verificar tus datos antes de enviar un reporte.\n"
        "Usa el comando /verificar para iniciar el proceso.")
        return

    # Verificar si el usuario est√° enviando el comando sin mensaje
    if not user_message:
        await update.message.reply_text(
            "‚ö†Ô∏è Por favor, proporciona un mensaje despu√©s de /ayuda. Ejemplos de c√≥mo hacerlo:\n\n"
            "1Ô∏è‚É£ **Aviso** (incidentes como problemas en la v√≠a p√∫blica):\n"
            "`/ayuda Farola apagada en la Calle Mayor 12, Madrid`\n"
            "Para reportar problemas como baches, apagones, √°rboles ca√≠dos, etc.\n\n"
            "2Ô∏è‚É£ **Petici√≥n** (solicitudes de mejora o nuevas instalaciones):\n"
            "`/ayuda Solicito nueva instalaci√≥n de √°rea infantil en la Calle del Sol 3, Madrid`\n"
            "Para pedir cosas como instalaci√≥n de se√±ales, fuentes, mejoras de accesibilidad, etc.\n\n"
            "üîç **Recuerda el formato correcto de direcci√≥n:**\n"
            "- Incluye **tipo de v√≠a**, nombre de la calle, n√∫mero (si aplica), ciudad y **c√≥digo postal**.\n"
            "   Ejemplos v√°lidos:\n"
            "   ‚Ä¢ Calle Alcal√° 23, Madrid, 28041\n"
            "   ‚Ä¢ Avenida de Am√©rica 12, Madrid, 28028\n"
            "   ‚Ä¢ Plaza Mayor 1, Madrid\n"
            "   ‚Ä¢ Carretera M-30 salida 5, Madrid, 28002\n\n"
            "‚ùó **Evita direcciones vagas** como 'en mi casa', 'por aqu√≠', 'cerca del parque'. Necesitamos direcciones concretas para procesar tu solicitud correctamente.",
            parse_mode="Markdown"
        )
        return

    # Verificar si el usuario ha enviado un mensaje recientemente (esperar 1 minuto entre mensajes)
    last_message_time = context.user_data.get(user_id, {}).get("last_message_time", 0)
    current_time = time.time()

    # Si no ha pasado 1 minuto desde el √∫ltimo mensaje
    if current_time - last_message_time < 60:
        remaining_time = 60 - (current_time - last_message_time)
        await update.message.reply_text(f"‚ö†Ô∏è Por favor, espera {int(remaining_time)} segundos antes de enviar otro reporte.")
        return

    # Actualizar el tiempo del √∫ltimo mensaje
    context.user_data[user_id] = context.user_data.get(user_id, {})
    context.user_data[user_id]["last_message_time"] = current_time

    # Verificar si el mensaje es un reporte v√°lido
    reporte = analizar_reporte(user_message)
    if not reporte:
        print("‚ö†Ô∏è No se pudo clasificar el mensaje.")
        await update.message.reply_text("‚ö†Ô∏è No he podido entender tu solicitud.")
        return

    tipo_reporte = reporte["tipo_reporte"]
    categoria = reporte["categoria"]
    subcategoria = reporte["subcategoria"]

    # Validar contra los diccionarios de categor√≠as
    if tipo_reporte == "aviso":
        if categoria not in AVISOS or subcategoria not in AVISOS[categoria]:
            print(f"‚ö†Ô∏è Reporte inv√°lido: {reporte}")
            await update.message.reply_text("‚ö†Ô∏è No he podido entender tu solicitud.")
            return
    elif tipo_reporte == "petici√≥n":
        if categoria not in PETICIONES or subcategoria not in PETICIONES[categoria]:
            print(f"‚ö†Ô∏è Reporte inv√°lido: {reporte}")
            await update.message.reply_text("‚ö†Ô∏è No he podido entender tu solicitud.")
            return
    else:
        print("‚ö†Ô∏è Tipo de reporte desconocido.")
        await update.message.reply_text("‚ö†Ô∏è No he podido entender tu solicitud.")
        return

    # Analizar la direcci√≥nn
    direccion = analizar_direccion(user_message)
    print(f"Direcci√≥n extra√≠da: {direccion}")
    if not direccion:
        print("‚ö†Ô∏è Direcci√≥n no v√°lida. Abortando reporte.")
        await update.message.reply_text("‚ö†Ô∏è No he podido entender tu solicitud.")
        return

    respuesta = (
        f"üìã Reporte clasificado:\n"
        f"üë§ Usuario: `{user_id}`\n"
        f"üìå Tipo: {tipo_reporte.capitalize()}\n"
        f"üìÇ Categor√≠a: {categoria}\n"
        f"üîñ Subcategor√≠a: {subcategoria}\n"
        f"üó∫Ô∏è Direcci√≥n: {direccion}\n"
        f"üí¨ Descripci√≥n: {user_message}"
    )

    await update.message.reply_text(respuesta, parse_mode="Markdown")

    # Enviar el reporte al grupo de Telegram
    await context.bot.send_message(
        chat_id=TELEGRAM_GROUP_ID,
        text=respuesta
    )

#------------------------------------------------------------------------------------------------

AVISOS = {
    "Alumbrado P√∫blico": [
        "Calle Apagada",
        "Calle Apagada v2",
        "Calle Apagada v4",
        "Farola Apagada",
        "Luces de Navidad",
        "Otras Aver√≠as de Alumbrado"
    ],
    "Aparcamiento Regulado": [
        "Aplicaci√≥n M√≥vil",
        "Aviso de Denuncia",
        "No Imprime tique o no valida Pin",
        "No permite anulaci√≥n de denuncia",
        "Parqu√≠metro",
        "Tarjeta Cr√©dito atascada"
    ],
    "Arboles y Parques": [
        "√Årbol en mal estado",
        "Caminos no pavimentados",
        "Incidencias de riesgo",
        "Incidencias en alcorque o hueco",
        "Plagas",
        "Poda de √Årbol",
        "Quitar maleza",
        "Sustituci√≥n de √Årbol"
    ],
    "√Åreas Infantiles, √Åreas de Mayores y circuitos": [
        "√Årea de Mayores y circuitos",
        "√Årea Infantil"
    ],
    "Calzadas y Aceras": [
        "Alcantarillado",
        "Desperfecto en acera",
        "Desperfecto en calzada",
        "Hidrantes de bomberos",
        "Otras incidencias en calzadas y aceras",
        "Tapas de registro",
        "Tapa de Agua Isabel II"
    ],
    "Cubos y Contenedores": [
        "Cambio de tama√±o de cubo",
        "Cambio de ubicaci√≥n de cubo o contenedor",
        "Cubo o contenedor abandonado",
        "Cubo o contenedor en mal estado",
        "Horquillas delimitadoras",
        "Nuevo cubo o contenedor",
        "Vaciado de aceite",
        "Vaciado de cubo o contenedor"
    ],
    "Fuentes": [
        "Incidencias en fuentes de Beber",
        "Incidencias en fuentes ornamentales"
    ],
    "Limpiezas y Pintadas": [
        "Limpieza en solares municipales",
        "Limpieza en v√≠as p√∫blicas",
        "Limpieza mobiliario urbano o √°reas infantiles",
        "Limpieza en zonas verdes",
        "Pintadas y Grafitis",
        "SELUR"
    ],
    "Mobiliario Urbano": [
        "Banco",
        "Bolardo u horquilla",
        "Otros",
        "Vallas"
    ],
    "Papeleras": [
        "Falta de bolsas para excrementos caninos",
        "Mal estado de papelera",
        "Nueva Instalaci√≥n de Papelera",
        "Vaciado de Papelera"
    ],
    "Plagas": [
        "Ratas y Cucarachas"
    ],
    "Retirada de Elementos": [
        "Animales muertos",
        "Contenedor de ropa no autorizada",
        "Muebles abandonados en v√≠a p√∫blica",
        "Muebles Particulares",
        "Recogida de saco o contenedor de escombros"
    ],
    "Se√±ales y Sem√°foros": [
        "Incidencia en avisador ac√∫stico de sem√°foro",
        "Incidencia en Pulsador",
        "Incidencia en Se√±al",
        "Sem√°foro Apagado"
    ],
    "Veh√≠culos Abandonados. Retirada de veh√≠culo": [
        "Veh√≠culos Abandonados. Retirada de veh√≠culo"
    ]
}

PETICIONES = {
    "√Åreas Infantiles, √Åreas de Mayores y circuitos": [
        "Nueva Instalaci√≥n"
    ],
    "Calzadas y Aceras": [
        "Mejora de Accesibilidad"
    ],
    "Fuentes": [
        "Nueva Instalaci√≥n de fuente de beber"
    ],
    "Mobiliario Urbano": [
        "Nueva Instalaci√≥n"
    ],
    "Se√±ales y Sem√°foros": [
        "Nueva Se√±al"
    ]
}
